# -*- coding: utf-8 -*-
"""Color-Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Jv3tSj-PooozzJc43rGVYiinDpIGYRl5

Number of values to process: 100013 x 256 x 256 x 3 = 19,663,355,904â€¬

Unless the images are scaled down, which is a good idea for the 50K dataset?
"""

# Commented out IPython magic to ensure Python compatibility.
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import numpy as np
import cv2
from collections import Counter
from skimage.color import rgb2lab, deltaE_cie76
import os

# %matplotlib inline

Iowa = cv2.imread('Iowa.png')
print("The type of this input is {}".format(type(Iowa)))
print("Shape: {}".format(Iowa.shape))
plt.imshow(Iowa)

Colorado = cv2.imread('Colorado.png')
print("The type of this input is {}".format(type(Colorado)))
print("Shape: {}".format(Colorado.shape))
plt.imshow(Colorado)

Iowa = cv2.cvtColor(Iowa, cv2.COLOR_BGR2RGB)
plt.imshow(Iowa)

Colorado = cv2.cvtColor(Colorado, cv2.COLOR_BGR2RGB)
plt.imshow(Colorado)

gray_Iowa = cv2.cvtColor(Iowa, cv2.COLOR_BGR2GRAY)
plt.imshow(gray_Iowa, cmap='gray')

gray_Colorado = cv2.cvtColor(Colorado, cv2.COLOR_BGR2GRAY)
plt.imshow(gray_Colorado, cmap='gray')

resized_Iowa = cv2.resize(Iowa, (128, 128))
plt.imshow(resized_Iowa)

resized_Colorado = cv2.resize(Colorado, (128, 128))
plt.imshow(resized_Colorado)

def RGB2HEX(color):
    return "#{:02x}{:02x}{:02x}".format(int(color[0]), int(color[1]), int(color[2]))

def get_image(image_path):
    image = cv2.imread(image_path)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    return image

def get_colors(image,number_of_colors,show_chart):
  modified_image = cv2.resize(image, (128,128), interpolation = cv2.INTER_AREA)
  modified_image = modified_image.reshape(modified_image.shape[0]*modified_image.shape[1], 3)
  clf = KMeans(n_clusters = number_of_colors)
  labels = clf.fit_predict(modified_image)
  counts = Counter(labels)

  center_colors = clf.cluster_centers_
  # We get ordered colors by iterating through the keys
  ordered_colors = [center_colors[i] for i in counts.keys()]
  hex_colors = [RGB2HEX(ordered_colors[i]) for i in counts.keys()]
  rgb_colors = [ordered_colors[i] for i in counts.keys()]

  if (show_chart):
      plt.figure(figsize = (8, 6))
      plt.pie(counts.values(), labels = hex_colors, colors = hex_colors)

  return rgb_colors

get_colors(get_image('/content/Iowa.png'), 5, True)

get_colors(get_image('/content/Colorado.png'), 5, True)

"""Ref: https://towardsdatascience.com/color-identification-in-images-machine-learning-application-b26e770c4c71"""